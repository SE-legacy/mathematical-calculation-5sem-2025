// NOTE: Лекция 7. 21.10.2025
#set math.equation(numbering: "1.")
== Параграф 3. (Метод прогонки. Решение 3 диагональных СЛАУ)

Рассмотрим СЛАУ следующего вида

$
cases(
	a_i dot x_(i - 1) - b_i x_i + c_i x_(i + 1) = d_i\, quad i = overline(1\, n),
	a_1 = c_n = 0
)
$


$
#[(1)] quad a_i dot x_(i - 1) - b_i x_i + c_i x_(i + 1) = d_i\, quad i = overline(1\, n),
$<l7:eq1>

$
#[(2)] quad a_1 = c_n = 0
$<l7:eq2>

Запишем СЛАУ (@l7:eq1 -- @l7:eq2)
$
#[(3)] quad
mat(
	-b_1, c_1, 0, 0, dots, 0;
	a_2, -b_2, c_2, 0, dots, 0;
	0, a_3, -b_3, c_3, dots, 0;
	dots, dots, dots, dots, dots, dots;
	0, 0, 0, dots, a_n, -b_n
)_(n times n) dot mat(x_1; x_2; dots; x_n)_(n times 1) 
= mat(d_1; d_2; dots; d_n)_(n times 1)
$<l7:eq3>

Запиешм РМК СЛАУ (@l7:eq3)

$
mat(
	dot, dot , , , , , dot;
	dot, dot, dot , ,0, , dot;
	, dot, dot, dot, , , dot;
	, , 0, dots, dots, dots, dot;
	, , , , dot, dot, dot;
	augment: #6
) ~ dots ~
mat(
	dot, dot , , , , , dot;
	, dot, dot , ,0, , dot;
	, , , , , , dot;
	, 0, , , dot, dot, dot;
	, , , , , dot, dot;
	augment: #6
)

$

Результирующая РМК после прямого метода Гаусса

Если к СЛАУ вида @l7:eq3 применить в лоб прямой ход метода Гаусса, то в 
результате него трех диагональных РМК СЛАУ @l7:eq3 будет преобразована к двух
диагональной итоговой РМК. При этом нулевые элементы стоящие вне исходных не нелувых
диагоналей будут преобразованы снова в нулевые элементы (при этом нижняя из 3
диагоналей будет обнулена; а две оставшиеся изменят свои значения). Так же нулевые
элементы полученные расположенные выше двух полученных диагоналей в результате
хода прямого метода Гаусса, так же не смогут оказать влияния на итоговый результат
(т.к. линейная комбинация нулей есть ноль).

В связи с чем поставим перед собой цель *оптимизировать* метод Гаусса применительно
к случаю систем вида @l7:eq3. А именно, попытаемся его усовершенствовать его,
устранив лишние "операции" по преобразованию нулевых элементов в себя. При этом
мы откажемся от лобового применения метода Гаусса испозьзовав при этом его конечный
результат:

А имнно то что после прямого хода уравнения примут двух компонентый вид

$
#[(4)] quad x_i = underbrace(P_(i + 1), ?) x_(i + 1) + underbrace(Q_(i + 1), ?), quad i 
= overline(1\, n) quad #[---] (i) #[уравнение]
$<l7:eq4>

Обратив внимание, что в $i$-ом уравнении вида @l7:eq1 в результате его преобразования
к виду @l7:eq4 исчезает компонента $x_(i - 1)$, однако эта неизвестная присутствует
в $(i - 1)$-ом уравнении вида @l7:eq4, которая имеет вид:
$
#[(5)] quad x_(i - 1) = P_i x_i + Q_i quad #[---] (i - 1) #[уравнение]
$<l7:eq5>

Соответственно, подставив выражение @l7:eq5  для $(i - 1)$-ого уравнения записано
до уравнения $i + 1$, получим еще один (уже третий способ записи i-ого уравения)

$
#[(6)] quad a_i (P_i x_i + Q_i) - b_i x_i + c_i x_(i + 1) = d_i quad 
#[--- i-ое уравнение в третьей форме записи] 
$<l7:eq6>

$
a_i P_i x_i + a_i Q_i - b_i x_i + c_i x_(i + 1) = d_i\
(a_i P_i - b_i) x_i = -  c_i x_(i + 1) + (d_i - a_i Q_i)\
$

$
#[(7)] quad x_i = c_i/(b_i a_i P_i) dot x_(i + 1) + (a_i dot Q_i - d_i)/(b_i - a_i P_i) 
#[--- i-ое уравнение в 4 форме записи] 
$<l7:eq7>

Сравнивая две различные формы записи одного и того же i-ого уравнения, а именно
@l7:eq4 и @l7:eq7 мы можем прийти к следующим равенствам соответствующих коэффициентов

$
#[(8)] quad 
P_(i + 1) = c_i/(b_i a_i P_i),\
Q_(i + 1) = (a_i dot Q_i - d_i)/(b_i - a_i P_i)\
$<l7:eq8>

Рассмотрим формулы @l7:eq8 для применительно к @l7:eq3 уравнению

$
P_2 = c_1 /(b_1 - q_1 dot p_1)
$

$
Q_2 = (a_1 Q_1 -d_1) / (b_1 - q_1 dot p_1)
$

$
P_2 = c_1 /(b_1 - q_1 dot p_1) = c_1 / b_1\

Q_2 = (a_1 Q_1 -d_1) / (b_1 - q_1 dot p_1) = -d_1 / b_1
$<l7:eq9>

Таким образом используя формулы @l7:eq8 и @l7:eq9 мы можем однозначным образом
задать искомые значения коэффициентов двух компонентых уравнений вида @l7:eq4
в слледующей последовательности

$
underbrace((P_2, Q_2),  #[@l7:eq9]) ->^(#[@l7:eq8]) (P_3, Q_3) ->^(#[@l7:eq8])
dots ->^(#[@l7:eq8]) (P_n, Q_n) ->^(#[@l7:eq8 б]) Q_(n + 1)
$

Таким образом узнав коэффициенты двухкомпонентых уравнений вида @l7:eq4, 
мы сможем, реализовать обратный ход (но не подстрочный) по следующим формулам:

$
#[(10)] quad x_n = Q_(n + 1) 
$<l7:eq10>

$
cases(
	x_(n - 1) = P_n x_n + Q_n,
	x_(n - 2) = P_n - 1 x_n - 1 + Q_n - 1,
	dots,
	x_1 = P_2 x_2 + Q_2
)
$<l7:eq11>

Из выше изложенного можем выделить следующий алгоритм *метода прогонки*:
=== Этам 1 (прямая прогонка)
она состоит в нахождении прогоночных коэффициентов:
$
(P_2, Q_2), (P_3_Q_3), dots, (P_n, Q_n), Q_(n + 1)
$

=== Этап обратная прогонка
нахождение $x_i$ по формулам @l7:eq10 и @l7:eq11

Структурно формулы @l7:eq9 и  @l7:eq8, а так же @l7:eq10  и @l7:eq11 являются рекурсией.

Метод прогонки --- это оптимизированный метод Гаусса присистеме такого определенного порядка



